apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dac-coordinator
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: letsencrypt-prod
    acme.cert-manager.io/http01-edit-in-place: "true"
    # Using nginx-ingress as a reverse proxy to add CORS headers (currently missing in the octez-dac-node binary):
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, PUT, POST, DELETE, PATCH, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-expose-headers: "*"
    # Disable idle timeout
    nginx.ingress.kubernetes.io/proxy-read-timeout: "2147483647"
    # Max body size: set a value greater than what you expect to upload to the DAC
    nginx.ingress.kubernetes.io/proxy-body-size: 2g
spec:
  tls:
    - hosts:
        - dac-coordinator.gcp.marigold.dev
      secretName: dac-coordinator-ingress-cert-secret1
  rules:
    - host: dac-coordinator.gcp.marigold.dev
      http:
        paths:
          - pathType: Prefix
            path: "/"
            backend:
              service:
                name: dac-coordinator-service
                port:
                  name: http
---
apiVersion: v1
kind: Service
metadata:
  name: dac-coordinator-service
spec:
  selector:
    app: dac-coordinator
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 80
      name: http
      targetPort: 11100
